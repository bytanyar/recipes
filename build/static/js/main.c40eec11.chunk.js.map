{"version":3,"sources":["components/RecipeParts/Ingredients.js","components/RecipeParts/Instructions.js","components/Modal/RecipeModal.js","components/RecipesList.js","components/Forms/NewIngredients.js","components/Forms/NewInstructions.js","components/Forms/NewRecipe.js","App.js","serviceWorker.js","index.js"],"names":["Ingredients","_ref","recipe","ingredientNodes","ingredients","map","ingredient","react_default","a","createElement","className","qty","unit","item","description","Instructions","instructionNodes","instructions","instruction","RecipeModal","bgImage","closeRecipe","bgStyle","backgroundImage","concat","style","onClick","name","RecipeParts_Ingredients","RecipeParts_Instructions","RecipesList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleRecipe","theRecipeId","recipeState","state","showRecipe","setState","recipeId","bind","assertThisInitialized","_this2","listingNodes","recipesData","recipes","key","id","prepTime","cookTime","Modal_RecipeModal","image","Component","NewIngredients","newIngredient","onSubmit","ingredientQty","document","getElementById","value","ingredientUnit","ingredientName","ingredientDescription","console","log","htmlFor","disabled","type","maxLength","NewInstructions","newInstruction","NewRecipe","recipeName","Forms_NewIngredients","Forms_NewInstructions","App","react_router_dom","href","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c40eec11.chunk.js","sourcesContent":["import React from 'react';\n\nimport './ingredients.css';\n\nconst Ingredients = ({\n    recipe\n}) => {\n    const ingredientNodes = recipe ? recipe.ingredients.map((ingredient) => {\n        return (\n            <li className=\"ingredients\">{ingredient.qty} {ingredient.unit} {ingredient.item}, {ingredient.description}</li>\n        );\n    }) : null;\n\n    return (\n        <ul className=\"ingredients-list\">\n            {ingredientNodes}\n        </ul>\n    )\n}\n\nexport default Ingredients;","import React from 'react';\n\nimport './instructions.css';\n\nconst Instructions = ({\n    recipe\n}) => {\n    const instructionNodes = recipe ? recipe.instructions.map((instruction) => {\n        return (\n            <li className=\"instructions\">{instruction}</li>\n        );\n    }) : null;\n\n    return (\n        <ul className=\"instructions-list\">\n            {instructionNodes}\n        </ul>\n    )\n}\n\nexport default Instructions;","import React from 'react';\n\nimport './recipe-modal.css';\n\nimport Ingredients from '../RecipeParts/Ingredients';\nimport Instructions from '../RecipeParts/Instructions';\n\nconst RecipeModal = ({\n    bgImage,\n    closeRecipe,\n    recipe\n}) => {\n    const bgStyle = { backgroundImage: `url(${bgImage})`}\n    return (\n        <div className=\"recipe-modal-container\">\n            <div className=\"recipe-container\" style={bgStyle}>\n                <p className=\"close-x\" onClick={closeRecipe}>x</p>\n                <h2>{recipe.name}</h2>\n                <Ingredients recipe={recipe} />\n                <Instructions recipe={recipe} />\n            </div>\n        </div>\n    )\n}\n\nexport default RecipeModal;","import React, { Component } from 'react';\n\nimport './recipes-list.css';\n\nimport recipesData from '../data/recipes.json';\nimport RecipeModal from './Modal/RecipeModal';\n\nclass RecipesList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            recipeId: 0,\n            showRecipe: false\n        }\n        this.toggleRecipe = this.toggleRecipe.bind(this);\n    }\n    toggleRecipe = (theRecipeId) => {\n        const recipeState = this.state.showRecipe;\n        this.setState({\n            recipeId: theRecipeId,\n            showRecipe: !recipeState\n        });\n    };\n    closeRecipe = () => {\n        this.setState({\n            showRecipe: false\n        })\n    }\n\n    render() {\n        const listingNodes = recipesData ? recipesData.recipes.map((recipe) => {\n            return (\n                <span key={recipe.id}>\n                    <li className=\"recipe\" onClick={() => this.toggleRecipe(recipe.id)}>\n                        <span className=\"name\">{recipe.name}</span>\n                        <span className=\"time\">{recipe.prepTime + recipe.cookTime} minutes</span>\n                        <span className=\"main-ingredient\">{recipe.ingredients[0].item}</span>\n                    </li>\n                    {this.state.showRecipe && this.state.recipeId === recipe.id ?\n                        <RecipeModal\n                            bgImage={recipe.image}\n                            closeRecipe={this.closeRecipe}\n                            recipe={recipe}\n                        />\n                        : null}\n                </span>\n            )\n        }) : null;\n\n\n\n\n\n        return (\n            <div className=\"recipes-container\">\n                {this.state.showRecipe ?\n                    <div className=\"recipe-modal-bg\" onClick={this.closeRecipe} />\n                    : null}\n                <ul className=\"recipes-list\">\n                    {listingNodes}\n                </ul>\n                <div className=\"background-fixed\" />\n            </div>\n        );\n    }\n}\n\nexport default RecipesList;","import React from 'react';\n\nimport './new-ingredients.css';\n\nconst NewIngredients = () => {\n\n    let newIngredient;\n\n    const addIngredient = () => {\n        const ingredientQty = document.getElementById('qty') ? document.getElementById('qty').value : null;\n        const ingredientUnit = document.getElementById('unit') ? document.getElementById('unit').value : null;\n        const ingredientName = document.getElementById('item') ? document.getElementById('item').value : null;\n        const ingredientDescription = document.getElementById('description') ? document.getElementById('description').value : null;\n        newIngredient = ingredientQty + ' ' + ingredientUnit + ' ' + ingredientName + ', ' + ingredientDescription;\n        console.log(newIngredient);\n    }\n\n    return (\n        <form id=\"new-ingredient-form\" onSubmit={addIngredient}>\n\n            <label htmlFor=\"ingredients\">Ingredients:</label>\n            <input disabled type=\"text\" className=\"ingredient\" value={newIngredient} />\n            <fieldset id=\"ingredients\" className=\"ingredients\">\n                <input type=\"number\" className=\"ingredient-detail qty\" id=\"qty\" maxLength=\"4\" />\n                <input type=\"text\" className=\"ingredient-detail unit\" id=\"unit\" maxLength=\"6\" />\n                <input type=\"text\" className=\"ingredient-detail item\" id=\"item\" />\n                <input type=\"text\" className=\"ingredient-detail description\" id=\"description\" />\n                <button id=\"add-ingredient\" type=\"submit\">Add Ingredient</button>\n            </fieldset>\n        </form>\n    )\n}\n\nexport default NewIngredients;","import React from 'react';\n\nimport './new-instructions.css';\n\nconst NewInstructions = () => {\n\n    let newInstruction;\n\n    const addInstruction = () => {\n        const instruction = document.getElementById('instruction') ? document.getElementById('instruction').value : null;\n        newInstruction = instruction;\n        console.log(newInstruction);\n    }\n\n    return (\n        <form id=\"new-ingredient-form\" onSubmit={addInstruction}>\n\n            <label htmlFor=\"instructions\">Instructions:</label>\n            <input disabled type=\"text\" className=\"instruction\" value={newInstruction} />\n            <fieldset id=\"instructions\" className=\"instructions\">\n                <input type=\"text\" className=\"instruction-details\" id=\"instruction\" />\n                <button id=\"add-instruction\" type=\"submit\">Add Instruction</button>\n            </fieldset>\n        </form>\n    )\n}\n\nexport default NewInstructions;","import React from 'react';\n\nimport './new-recipe.css';\nimport NewIngredients from './NewIngredients';\nimport NewInstructions from './NewInstructions';\n\nconst NewRecipe = () => {\n\n    const saveRecipe = () => {\n        const recipeName = document.getElementById('recipe-name') ? document.getElementById('recipe-name').value : null;\n        console.log(recipeName);\n    }\n\n    return (\n        <div className=\"main-recipe-form\">\n            <form id=\"new-recipe-form\" onSubmit={saveRecipe}>\n                <label htmlFor=\"recipeName\">Recipe Name</label>\n                <input type=\"text\" id=\"recipe-name\" />\n\n                <button type=\"submit\">Save Recipe Name</button>\n            </form>\n            <NewIngredients />\n            <NewInstructions />\n        </div>\n    )\n}\n\nexport default NewRecipe;","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport './app.css';\n\nimport RecipesList from './components/RecipesList';\nimport NewRecipe from './components/Forms/NewRecipe';\n\nclass App extends Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <div className=\"app\">\n                    <header className=\"app-header\">\n                        <h1>Recipes</h1>\n                        <nav>\n                            <ul>\n                                <li><a href=\"/\">Recipes List</a></li>\n                                <li><a href=\"/newRecipe\">New Recipe</a></li>\n                            </ul>\n                        </nav>\n                    </header>\n\n\n                    <Route path=\"/\" exact component={RecipesList} />\n                    <Route path=\"/newRecipe\" exact component={NewRecipe} />\n\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}