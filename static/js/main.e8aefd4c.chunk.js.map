{"version":3,"sources":["components/Modal/recipe-modal.styled.js","components/RecipeParts/Ingredients.js","components/RecipeParts/Instructions.js","components/Modal/RecipeModal.js","components/recipes-list.styled.js","components/RecipesList.js","components/Forms/NewIngredients.js","components/Forms/NewInstructions.js","components/Forms/NewRecipe.js","App.js","serviceWorker.js","index.js"],"names":["RecipeModalStyles","styled","div","_templateObject","Ingredients","_ref","recipe","ingredientNodes","ingredients","map","ingredient","react_default","a","createElement","key","id","className","qty","unit","item","description","Instructions","instructionNodes","instructions","instruction","i","RecipeModal","bgImage","closeRecipe","bgStyle","backgroundImage","concat","console","log","style","onClick","name","RecipeParts_Ingredients","RecipeParts_Instructions","RecipesContainerStyles","recipes_list_styled_templateObject","RecipesList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleRecipe","recipeId","recipeState","state","showRecipe","setState","bind","assertThisInitialized","_this2","listingNodes","recipesData","recipes","classes","prepTime","cookTime","Modal_RecipeModal","image","Component","NewIngredients","newIngredient","onSubmit","ingredientQty","document","getElementById","value","ingredientUnit","ingredientName","ingredientDescription","htmlFor","disabled","type","maxLength","NewInstructions","newInstruction","NewRecipe","recipeName","Forms_NewIngredients","Forms_NewInstructions","App","react_router_dom","basename","process","to","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8aefd4c.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\n\r\nexport const RecipeModalStyles = styled.div`\r\n    .recipe-container {\r\n        background-color: beige;\r\n        border-radius: 20px;\r\n        left: 12.5%;\r\n        margin: 5vh auto;\r\n        max-height: 90vh;\r\n        max-width: 500px;\r\n        padding: 5px 15px 15px;\r\n        position: absolute;\r\n        right: 12.5%;\r\n        top: 5vh;\r\n        width: 75%;\r\n        z-index: 750;\r\n    }\r\n    .close-x {\r\n        background-color: #fff;\r\n        border: 1px solid #333;\r\n        border-radius: 50%;\r\n        padding: 0 5px;\r\n        position: absolute;\r\n        right: 20px;\r\n        text-align: left;\r\n        top: 10px;\r\n        width: 20px;\r\n    }\r\n    .close-x:hover {\r\n        background-color: blanchedalmond;\r\n    }\r\n`;","import React from 'react';\r\n\r\nimport './ingredients.css';\r\n\r\nconst Ingredients = ({\r\n    recipe\r\n}) => {\r\n    const ingredientNodes = recipe ? recipe.ingredients.map((ingredient) => {\r\n        return (\r\n            <li key={ingredient.id} className=\"ingredients\">{ingredient.qty} {ingredient.unit} {ingredient.item}, {ingredient.description}</li>\r\n        );\r\n    }) : null;\r\n\r\n    return (\r\n        <ul className=\"ingredients-list\">\r\n            {ingredientNodes}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Ingredients;","import React from 'react';\r\n\r\nimport './instructions.css';\r\n\r\nconst Instructions = ({\r\n    recipe\r\n}) => {\r\n    const instructionNodes = recipe ? recipe.instructions.map((instruction, i) => {\r\n        return (\r\n            <li key={i} className=\"instructions\">{instruction}</li>\r\n        );\r\n    }) : null;\r\n\r\n    return (\r\n        <ul className=\"instructions-list\">\r\n            {instructionNodes}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Instructions;","import React from 'react';\r\n\r\nimport './recipe-modal.styled.js';\r\n\r\nimport Ingredients from '../RecipeParts/Ingredients';\r\nimport Instructions from '../RecipeParts/Instructions';\r\n\r\nimport { RecipeModalStyles } from './recipe-modal.styled';\r\n\r\nconst RecipeModal = ({\r\n    bgImage,\r\n    closeRecipe,\r\n    recipe\r\n}) => {\r\n    const bgStyle = { backgroundImage: `url(${bgImage})`};\r\n\r\n    console.log(bgImage);\r\n\r\n    return (\r\n        <RecipeModalStyles className=\"recipe-modal-container\">\r\n            <div className=\"recipe-container\" style={bgImage ? bgStyle : null}>\r\n                <p className=\"close-x\" onClick={closeRecipe}>x</p>\r\n                <h2>{recipe.name}</h2>\r\n                <Ingredients recipe={recipe} />\r\n                <Instructions recipe={recipe} />\r\n            </div>\r\n        </RecipeModalStyles>\r\n    )\r\n}\r\n\r\nexport default RecipeModal;","import styled from 'styled-components';\r\n\r\n\r\nexport const RecipesContainerStyles = styled.div`\r\n    height: 100vh;\r\n    margin: -20px auto 0;\r\n    max-width: 1200px;\r\n    padding-top: 20px;\r\n\r\n    * {\r\n        box-sizing: border-box;\r\n    }\r\n    .recipe-modal-bg {\r\n        background-color: rgba(0, 0, 0, 0.5);\r\n        bottom: 0;\r\n        left: 0;\r\n        position: absolute;\r\n        right: 0;\r\n        top: 0;\r\n        z-index: 100;\r\n    }\r\n    .background-fixed {\r\n        clip: rect(auto auto auto auto);\r\n        height: 100%;\r\n        left: 50%;\r\n        max-width: 1200px;\r\n        overflow: hidden;\r\n        position: absolute;\r\n        top: 100vh;\r\n        transform: translate(-50%, 0);\r\n        width: 100vw;\r\n        z-index: 1;\r\n    }\r\n    .recipes-list {\r\n        background-color: rgba(255, 255, 255, 0.5);\r\n        border: 1px solid #333;\r\n        margin: 20px;\r\n        margin-block-end: 0;\r\n        margin-block-start: 0;\r\n        padding-inline-start: 0;\r\n        position: relative;\r\n        z-index: 200;\r\n    }\r\n    .recipe {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        list-style: none;\r\n        padding: 5px 0;\r\n        text-align: left;\r\n\r\n        &:nth-child(2n){\r\n            background-color: beige;\r\n        }\r\n        &:hover {\r\n            background-color: blanchedalmond;\r\n        }\r\n        &.active {\r\n            background-color: lightblue;\r\n        }\r\n    }\r\n    .name {\r\n        font-size: 18px;\r\n        max-width: 350px;\r\n        padding-left: 20px;\r\n        width: 45%;\r\n    }\r\n    .time {\r\n        max-width: 150px;\r\n        width: 20%;\r\n    }\r\n    .main-ingredient {\r\n        max-width: 250px;\r\n        width: 35%;\r\n    }\r\n`;","import React, { Component } from 'react';\r\n\r\nimport recipesData from '../data/recipes.json';\r\nimport RecipeModal from './Modal/RecipeModal';\r\n\r\nimport { RecipesContainerStyles } from './recipes-list.styled';\r\n\r\nclass RecipesList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            recipeId: 0,\r\n            showRecipe: false\r\n        }\r\n        this.toggleRecipe = this.toggleRecipe.bind(this);\r\n    }\r\n    toggleRecipe = (recipeId) => {\r\n        const recipeState = this.state.showRecipe;\r\n        this.setState({\r\n            recipeId: recipeId,\r\n            showRecipe: !recipeState\r\n        });\r\n    };\r\n    closeRecipe = () => {\r\n        this.setState({\r\n            showRecipe: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const listingNodes = recipesData ? recipesData.recipes.map((recipe) => {\r\n            const classes = this.state.showRecipe && this.state.recipeId === recipe.id ? \"recipe active\" : \"recipe\";\r\n            return (\r\n                <span key={recipe.id}>\r\n                    <li className={classes} onClick={() => this.toggleRecipe(recipe.id)}>\r\n                        <span className=\"name\">{recipe.name}</span>\r\n                        <span className=\"time\">{recipe.prepTime + recipe.cookTime} minutes</span>\r\n                        <span className=\"main-ingredient\">{recipe.ingredients[0].item}</span>\r\n                    </li>\r\n                    {this.state.showRecipe && this.state.recipeId === recipe.id ?\r\n                        <RecipeModal\r\n                            bgImage={recipe.image}\r\n                            closeRecipe={this.closeRecipe}\r\n                            recipe={recipe}\r\n                        />\r\n                        : null}\r\n                </span>\r\n            )\r\n        }) : null;\r\n\r\n\r\n\r\n\r\n\r\n        return (\r\n            <RecipesContainerStyles className=\"recipes-container\">\r\n                {this.state.showRecipe ?\r\n                    <div className=\"recipe-modal-bg\" onClick={this.closeRecipe} />\r\n                    : null}\r\n                <ul className=\"recipes-list\">\r\n                    {listingNodes}\r\n                </ul>\r\n                <div className=\"background-fixed\" />\r\n            </RecipesContainerStyles>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RecipesList;","import React from 'react';\r\n\r\nimport './new-ingredients.css';\r\n\r\nconst NewIngredients = () => {\r\n\r\n    let newIngredient;\r\n\r\n    const addIngredient = () => {\r\n        const ingredientQty = document.getElementById('qty') ? document.getElementById('qty').value : null;\r\n        const ingredientUnit = document.getElementById('unit') ? document.getElementById('unit').value : null;\r\n        const ingredientName = document.getElementById('item') ? document.getElementById('item').value : null;\r\n        const ingredientDescription = document.getElementById('description') ? document.getElementById('description').value : null;\r\n        newIngredient = ingredientQty + ' ' + ingredientUnit + ' ' + ingredientName + ', ' + ingredientDescription;\r\n        console.log(newIngredient);\r\n    }\r\n\r\n    return (\r\n        <form id=\"new-ingredient-form\" onSubmit={addIngredient}>\r\n\r\n            <label htmlFor=\"ingredients\">Ingredients:</label>\r\n            <input disabled type=\"text\" className=\"ingredient\" value={newIngredient} />\r\n            <fieldset id=\"ingredients\" className=\"ingredients\">\r\n                <input type=\"number\" className=\"ingredient-detail qty\" id=\"qty\" maxLength=\"4\" />\r\n                <input type=\"text\" className=\"ingredient-detail unit\" id=\"unit\" maxLength=\"6\" />\r\n                <input type=\"text\" className=\"ingredient-detail item\" id=\"item\" />\r\n                <input type=\"text\" className=\"ingredient-detail description\" id=\"description\" />\r\n                <button id=\"add-ingredient\" type=\"submit\">Add Ingredient</button>\r\n            </fieldset>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NewIngredients;","import React from 'react';\r\n\r\nimport './new-instructions.css';\r\n\r\nconst NewInstructions = () => {\r\n\r\n    let newInstruction;\r\n\r\n    const addInstruction = () => {\r\n        const instruction = document.getElementById('instruction') ? document.getElementById('instruction').value : null;\r\n        newInstruction = instruction;\r\n        console.log(newInstruction);\r\n    }\r\n\r\n    return (\r\n        <form id=\"new-ingredient-form\" onSubmit={addInstruction}>\r\n\r\n            <label htmlFor=\"instructions\">Instructions:</label>\r\n            <input disabled type=\"text\" className=\"instruction\" value={newInstruction} />\r\n            <fieldset id=\"instructions\" className=\"instructions\">\r\n                <input type=\"text\" className=\"instruction-details\" id=\"instruction\" />\r\n                <button id=\"add-instruction\" type=\"submit\">Add Instruction</button>\r\n            </fieldset>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NewInstructions;","import React from 'react';\r\n\r\nimport './new-recipe.css';\r\nimport NewIngredients from './NewIngredients';\r\nimport NewInstructions from './NewInstructions';\r\n\r\nconst NewRecipe = () => {\r\n\r\n    const saveRecipe = () => {\r\n        const recipeName = document.getElementById('recipe-name') ? document.getElementById('recipe-name').value : null;\r\n        console.log(recipeName);\r\n    }\r\n\r\n    return (\r\n        <div className=\"main-recipe-form\">\r\n            <form id=\"new-recipe-form\" onSubmit={saveRecipe}>\r\n                <label htmlFor=\"recipeName\">Recipe Name</label>\r\n                <input type=\"text\" id=\"recipe-name\" />\r\n\r\n                <button type=\"submit\">Save Recipe Name</button>\r\n            </form>\r\n            <NewIngredients />\r\n            <NewInstructions />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewRecipe;","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\r\n\r\nimport './app.css';\r\n\r\nimport RecipesList from './components/RecipesList';\r\nimport NewRecipe from './components/Forms/NewRecipe';\r\n\r\nclass App extends Component {\r\n    render() {\r\n\r\n\r\n        return (\r\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                <div className=\"app\">\r\n                    <header className=\"app-header\">\r\n                        <h1>Recipes</h1>\r\n                        <nav>\r\n                            <ul>\r\n                                <li><Link to=\"/\">Recipes List</Link></li>\r\n                                <li><Link to=\"/newRecipe\">New Recipe</Link></li>\r\n                            </ul>\r\n                        </nav>\r\n                    </header>\r\n\r\n\r\n                    <Route path=\"/\" exact component={RecipesList} />\r\n                    <Route path=\"/newRecipe\" exact component={NewRecipe} />\r\n\r\n                </div>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}